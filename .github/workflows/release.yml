name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (leave empty to auto-increment)'
        required: false
        type: string
      version_type:
        description: 'Version increment type (if version not specified)'
        required: false
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer

      - name: Get current version
        id: current_version
        run: |
          CURRENT=$(grep -o '"version": "[^"]*"' composer.json | sed 's/"version": "//' | sed 's/"//' | sed 's/-dev//')
          echo "current=$CURRENT" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: new_version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            NEW_VERSION="${{ github.event.inputs.version }}"
          else
            CURRENT="${{ steps.current_version.outputs.current }}"
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT"
            MAJOR=${VERSION_PARTS[0]}
            MINOR=${VERSION_PARTS[1]}
            PATCH=${VERSION_PARTS[2]}
            
            case "${{ github.event.inputs.version_type }}" in
              "major")
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              "minor")
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              "patch")
                PATCH=$((PATCH + 1))
                ;;
            esac
            
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          fi
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION"

      - name: Update version in composer.json
        run: |
          sed -i 's/"version": "[^"]*"/"version": "${{ steps.new_version.outputs.version }}"/' composer.json
          
      - name: Update datestamp in composer.json
        run: |
          TIMESTAMP=$(date +%s)
          sed -i "s/\"datestamp\": \"[^\"]*\"/\"datestamp\": \"$TIMESTAMP\"/" composer.json

      - name: Commit version changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add composer.json
          git commit -m "Bump version to ${{ steps.new_version.outputs.version }}"
          git push

      - name: Create Git tag
        run: |
          git tag "v${{ steps.new_version.outputs.version }}"
          git push origin "v${{ steps.new_version.outputs.version }}"

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.new_version.outputs.version }}
          release_name: Release v${{ steps.new_version.outputs.version }}
          body: |
            ## Changes in v${{ steps.new_version.outputs.version }}
            
            Auto-generated release for version ${{ steps.new_version.outputs.version }}.
            
            ### Installation via Composer
            ```json
            {
              "repositories": [
                {
                  "type": "vcs",
                  "url": "https://github.com/bentonow/bento-drupal-sdk"
                }
              ],
              "require": {
                "drupal/bento_sdk": "v${{ steps.new_version.outputs.version }}"
              }
            }
            ```
          draft: false
          prerelease: false